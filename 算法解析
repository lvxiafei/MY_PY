递归与 分治、回溯、贪心、动态规划的关系：
    递归和栈有紧密关联，可以将递归看做一次次入栈出栈的过程

    迭代 是利用变量的原值推算出变量的一个新值，如果递归是自己调用自己的话，迭代就是 A 不停的调用 B

    回溯是一种算法思想，可以用递归实现。实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找
问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。

    递归算法是从顶置低求解问题，而·动态规划算法是从低置顶求解问题，同样也需要状态转移方程方程，和初始
条件，相较于递归算法的优势，动态规划算法不需要反复调用自身函数，也不需要储存每一层函数的状态，故而时间
花费和空间花费都要少的多。

    分治算法将原问题分解为若干个规模较小但类似于原问题的子问题（Divide），「递归」的求解这些子问题（
Conquer），然后再合并这些子问题的解来建立原问题的解。因为在求解大问题时，需要递归的求小问题，因此一般
用「递归」的方法实现，即自顶向下。

    贪心算法是自顶向下，采用的是逐步构造最优解的方法。在每个阶段，都在一定的标准下做出一个看上去最优的
决策。决策一旦做出，就不可能再更改。做出这个局部最优决策所依照的标准称为贪心准则。不能保证求得的最后解
是最佳的，一般复杂度低；而动态规划本质是穷举法，可以保证结果是最佳的，复杂度高。

    动态规划其实和分治策略是类似的，也是将一个原问题分解为若干个规模较小的子问题，递归的求解这些子问题，
然后合并子问题的解得到原问题的解。区别在于这些子问题会有重叠，一个子问题在求解后，可能会再次求解，于是我
们想到将这些子问题的解存储起来，当下次再次求解这个子问题时，直接拿过来就是。其实就是说，动态规划所解决的
问题是分治策略所解决问题的一个子集，只是这个子集更适合用动态规划来解决从而得到更小的运行时间。即用动态规
划能解决的问题分治策略肯定能解决，只是运行时间长了。因此，分治策略一般用来解决子问题相互对立的问题，称为
标准分治，而动态规划用来解决子问题重叠的问题。

自上而下：递归、分治、回溯、贪心
自下而上：动态规划


思维顺序：
    题型确定：
        
